周运营活动：

服务器开启初始化活动，ets.new(:activity, []),将活动信息加存在内存里面，然后Repo.init()再保存在Repo里面。
活动信息存储在内存和磁盘里面
 Periods.login(id)
 # 玩家登录时发送当前开启的周期运营活动信息，%{id => %{time: time, scope: scope}}，加载到玩家数据的periods里面
判断活动是否开启： Periods.opened_with_idip? -> Idip.is_func_open?()
   

数据变化：
ets和repo都要修改
module: Periods.Exchange.Repo
use DB.RepoAPI, name: :periods_exchange

module: Periods.Exchange.Ets
Ets.save(act_id, new_data)
Repo.save({act_id, new_data})

活动信息通过PeriodsAPI.periods()获取（为结构体）

数据重置：
on_avatar_am0_reset(id, time, data) #凌晨在线重置

on_avatar_reset(act_id, data) #在线时重置

on_login_reset(id, time, data)  #登录时重置

on_function_unlock（id, time, data） #功能是否开启 

日常活动：

活动模块：
activity_msg:
# 活动管理上行协议处理

activity_mgr:
#Server活动开启管理，Supervisor进程监视器模块

activity_cfg:
# 活动开启公共配置

activity_mods:
# 活动实例模块映射管理器，管理活动状态
on_begin(impl_data :: map) :: map
on_close(impl_data :: map) :: map
on_player_enter(avatar_info :: term, impl_data :: map) :: map
on_player_leave(avatar_info :: term, impl_data :: map) :: map

activity_config:
#配置表里面活动相应的数据

activity_role:
#活动数据处理模块
increment_entered(act, {id, %{activity_data: data}})
#增加entered次数
reset_times({id, data})
init_offline_hosting(data)
role_act_data_update({id, data}, false)
#登录时初始化活动信息（兼容），avatar, :handle_cast({:login, })

role_act_data_update({id, data}, false)
#修改玩家属性的activity_data和last_activity_time
special_reset(data)
#vip等级增长之后，可购买次数随等级增长

数据结构：
activity_data（活动属性）存于玩家数据里面

activity_data: %{
act_id => %{bought: 0, entered: 0, times: 0}
}
如名人堂数据结构：
103 => %{
   bought: 0,                        #购买次数
   entered: 0,                       #进入次数
   last_reward: 1573740000,          
   max: 597,                         #最高名次
   missed: %{base: 10, extra: 10},   #活跃度
   refresh_at: 1573812741,           
   times: 5,                         #默认次数
   times_reward: false               
}


数据修改，消息传递：
从data中获得，然后进行操作

星级怪挑战：
修改该活动的进入次数：
Module, :player_enter -> 
Router.route{{activity.role, :increment_entered}, act_id} ->
handle_cast({{module, action}, args}, {id, _, data}) ->
Activity.Role, :increment_entered

名人堂：
购买次数：
Activity.Role, :buy_times(act_id,  {_, %{activity_data: act_data}} = state) ->
Activity.Role.Buy, :buy(@famehall, {id, %{activity_data: %{@famehall => famehall} = activity_data, vip: %{level: level}} = data})

判断活动是否开启：
Idip.is_func_open?(act_id) ->
:ets.lookup(:func_list, func_id)
判断id活动 是否开启，活动是否开启在配置表里面